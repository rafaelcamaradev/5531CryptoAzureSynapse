{
	"name": "Union of Exchanges",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark01",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "1",
				"spark.autotune.trackingId": "3d894fc5-ca87-4552-aa84-9e9e8b22daba"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/735d0ce7-dfad-483d-94ed-3fa2bd57b61c/resourceGroups/dp203wipro/providers/Microsoft.Synapse/workspaces/dp203wipro/bigDataPools/spark01",
				"name": "spark01",
				"type": "Spark",
				"endpoint": "https://dp203wipro.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark01",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.functions import *\r\n",
					"import datetime\r\n",
					"\r\n",
					"dt = datetime.datetime.now()\r\n",
					"dt_frm = dt.strftime('%Y%m%d')\r\n",
					"\r\n",
					"\r\n",
					"dfBinance = spark \\\r\n",
					"          .read \\\r\n",
					"          .load(f'abfss://dp203wipro@dp203wipro.dfs.core.windows.net/5531CryptoFact_{dt_frm}/binance_*', format='parquet')\r\n",
					"\r\n",
					"dfGateio = spark \\\r\n",
					"     .read \\\r\n",
					"     .load(f'abfss://dp203wipro@dp203wipro.dfs.core.windows.net/5531CryptoFact_{dt_frm}/gateio_*', format='parquet')\r\n",
					"\r\n",
					"dfGateio  = dfGateio.withColumn('Exchange',lit('GATEIO'))\r\n",
					"dfBinance  = dfBinance.withColumn('Exchange',lit('BINANCE'))\r\n",
					"\r\n",
					"dfResult = dfBinance.unionAll(dfGateio)\r\n",
					"\r\n",
					"\"\"\"\r\n",
					"\t`tb1`.`id` AS `id`,\r\n",
					"\t\t`tb1`.`ticker` AS `ticker`,\r\n",
					"\t\t`tb1`.`coin` AS `coin`,\r\n",
					"\t\t`tb1`.`pair` AS `pair`,\r\n",
					"\t\t`tb1`.`vol_time` AS `vol_time`,\r\n",
					"\t\t`tb1`.`volume` AS `volume`,\r\n",
					"\t\t`tb1`.`processed_date` AS `processed_date`,\r\n",
					"\t\tmax(`tb1`.`processed_date`) OVER (PARTITION BY `tb1`.`coin` ORDER BY `tb1`.`processed_date` DESC) AS `last_processed_date`,\r\n",
					"\t\t`tb1`.`dm_inserted` AS `dm_inserted`\r\n",
					"\"\"\"\r\n",
					"dfResult = dfResult.select(\"id\",\"ticker\",\"coin\",\"pair\",\"vol_time\",\"volume\",\"processed_date\",\"dm_inserted\",\"Exchange\")\r\n",
					"\r\n",
					"dfResult.createOrReplaceTempView(\"fact_analyze_crypto_vol\")\r\n",
					""
				],
				"execution_count": 55
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dfBinancePond = spark \\\n",
					"          .read \\\n",
					"          .load(f'abfss://dp203wipro@dp203wipro.dfs.core.windows.net/5531CryptoPond_{dt_frm}/binancepond_*', format='parquet')\n",
					"\n",
					"dfGateioPond = spark \\\n",
					"     .read \\\n",
					"     .load(f'abfss://dp203wipro@dp203wipro.dfs.core.windows.net/5531CryptoPond_{dt_frm}/gateiopond_*', format='parquet')\n",
					"\n",
					"\n",
					"dfBinancePond.createOrReplaceTempView(\"fact_analyze_crypto_vol_pond_binance\")\n",
					"dfGateioPond.createOrReplaceTempView(\"fact_analyze_crypto_vol_pond_gateio\")\n",
					"\n",
					"#deprecated\n",
					"#dfGateioPond  = dfGateio.withColumn('Exchange',lit('GATEIO'))\n",
					"#dfBinancePond  = dfBinancePond.withColumn('Exchange',lit('BINANCE'))\n",
					"#dfResultPond = dfBinancePond.unionAll(dfGateioPond)"
				],
				"execution_count": 56
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW dm_fact_analyze_crypto_vol_binance\n",
					"AS\n",
					"WITH cte AS (\n",
					"\tSELECT\n",
					"\t\ttb1.id AS id,\n",
					"\t\ttb1.ticker AS ticker,\n",
					"\t\ttb1.coin AS coin,\n",
					"\t\ttb1.pair AS pair,\n",
					"\t\ttb1.vol_time AS vol_time,\n",
					"\t\ttb1.volume AS volume,\n",
					"\t\ttb1.processed_date AS processed_date,\n",
					"\t\tmax(tb1.processed_date) OVER (PARTITION BY tb1.coin ORDER BY tb1.processed_date DESC) AS last_processed_date,\n",
					"\t\ttb1.dm_inserted AS dm_inserted\n",
					"\tFROM\n",
					"\t\tfact_analyze_crypto_vol tb1\n",
					"),\n",
					"cte2 AS (\n",
					"SELECT\n",
					"\tcte.id AS id,\n",
					"\tcte.ticker AS ticker,\n",
					"\tcte.coin AS coin,\n",
					"\tcte.pair AS pair,\n",
					"\tcte.vol_time AS vol_time,\n",
					"\tcte.volume AS volume,\n",
					"\tcte.processed_date AS processed_date,\n",
					"\tcte.last_processed_date AS last_processed_date,\n",
					"\t(\n",
					"\tSELECT\n",
					"\t\tfirst(fact_analyze_crypto_vol.volume)\n",
					"\tFROM\n",
					"\t\tfact_analyze_crypto_vol\n",
					"\tWHERE\n",
					"\t\tfact_analyze_crypto_vol.coin = cte.coin\n",
					"\t\tAND fact_analyze_crypto_vol.processed_date = cte.last_processed_date) AS last_volume,\n",
					"\tcte.dm_inserted AS dm_inserted\n",
					"FROM\n",
					"\tcte\n",
					"),\n",
					"cte3 AS (\n",
					"SELECT\n",
					"\tcte2.last_volume / cte2.volume AS fact_calc,\n",
					"\tcte2.id AS id,\n",
					"\tcte2.ticker AS ticker,\n",
					"\tcte2.coin AS coin,\n",
					"\tcte2.pair AS pair,\n",
					"\tcte2.vol_time AS vol_time,\n",
					"\tcte2.volume AS volume,\n",
					"\tcte2.processed_date AS processed_date,\n",
					"\tcte2.last_processed_date AS last_processed_date,\n",
					"\tcte2.dm_inserted AS dm_inserted\n",
					"FROM\n",
					"\tcte2\n",
					")\n",
					"SELECT\n",
					"\tcte3.fact_calc AS fact_calc,\n",
					"\tcte3.id AS id,\n",
					"\tcte3.ticker AS ticker,\n",
					"\tcte3.coin AS coin,\n",
					"\tcte3.pair AS pair,\n",
					"\tifnull(pnd.vol_time, cte3.vol_time) AS vol_time,\n",
					"\tcte3.volume AS volume,\n",
					"\tcte3.processed_date AS processed_date,\n",
					"\tcte3.last_processed_date AS last_processed_date,\n",
					"\tcte3.fact_calc * cte3.vol_time AS pond_value,\n",
					"\tcte3.dm_inserted AS dm_inserted\n",
					"FROM (cte3\n",
					"\tLEFT JOIN fact_analyze_crypto_vol_pond_binance pnd ON (cte3.ticker = pnd.ticker\n",
					"\t\t\tAND cte3.vol_time = pnd.previous_vol_time))"
				],
				"execution_count": 57
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"\n",
					"CREATE OR REPLACE TEMPORARY VIEW dm_fact_analyze_crypto_vol_gateio\n",
					"AS\n",
					"WITH cte AS (\n",
					"\tSELECT\n",
					"\t\ttb1.id AS id,\n",
					"\t\ttb1.ticker AS ticker,\n",
					"\t\ttb1.coin AS coin,\n",
					"\t\ttb1.pair AS pair,\n",
					"\t\ttb1.vol_time AS vol_time,\n",
					"\t\ttb1.volume AS volume,\n",
					"\t\ttb1.processed_date AS processed_date,\n",
					"\t\tmax(tb1.processed_date) OVER (PARTITION BY tb1.coin ORDER BY tb1.processed_date DESC) AS last_processed_date,\n",
					"\t\ttb1.dm_inserted AS dm_inserted\n",
					"\tFROM\n",
					"\t\tfact_analyze_crypto_vol tb1\n",
					"),\n",
					"cte2 AS (\n",
					"SELECT\n",
					"\tcte.id AS id,\n",
					"\tcte.ticker AS ticker,\n",
					"\tcte.coin AS coin,\n",
					"\tcte.pair AS pair,\n",
					"\tcte.vol_time AS vol_time,\n",
					"\tcte.volume AS volume,\n",
					"\tcte.processed_date AS processed_date,\n",
					"\tcte.last_processed_date AS last_processed_date,\n",
					"\t(\n",
					"\tSELECT\n",
					"\t\tfirst(fact_analyze_crypto_vol.volume)\n",
					"\tFROM\n",
					"\t\tfact_analyze_crypto_vol\n",
					"\tWHERE\n",
					"\t\tfact_analyze_crypto_vol.coin = cte.coin\n",
					"\t\tAND fact_analyze_crypto_vol.processed_date = cte.last_processed_date) AS last_volume,\n",
					"\tcte.dm_inserted AS dm_inserted\n",
					"FROM\n",
					"\tcte\n",
					"),\n",
					"cte3 AS (\n",
					"SELECT\n",
					"\tcte2.last_volume / cte2.volume AS fact_calc,\n",
					"\tcte2.id AS id,\n",
					"\tcte2.ticker AS ticker,\n",
					"\tcte2.coin AS coin,\n",
					"\tcte2.pair AS pair,\n",
					"\tcte2.vol_time AS vol_time,\n",
					"\tcte2.volume AS volume,\n",
					"\tcte2.processed_date AS processed_date,\n",
					"\tcte2.last_processed_date AS last_processed_date,\n",
					"\tcte2.dm_inserted AS dm_inserted\n",
					"FROM\n",
					"\tcte2\n",
					")\n",
					"SELECT\n",
					"\tcte3.fact_calc AS fact_calc,\n",
					"\tcte3.id AS id,\n",
					"\tcte3.ticker AS ticker,\n",
					"\tcte3.coin AS coin,\n",
					"\tcte3.pair AS pair,\n",
					"\tifnull(pnd.vol_time, cte3.vol_time) AS vol_time,\n",
					"\tcte3.volume AS volume,\n",
					"\tcte3.processed_date AS processed_date,\n",
					"\tcte3.last_processed_date AS last_processed_date,\n",
					"\tcte3.fact_calc * cte3.vol_time AS pond_value,\n",
					"\tcte3.dm_inserted AS dm_inserted\n",
					"FROM (cte3\n",
					"\tLEFT JOIN fact_analyze_crypto_vol_pond_gateio pnd ON (cte3.ticker = pnd.ticker\n",
					"\t\t\tAND cte3.vol_time = pnd.previous_vol_time))"
				],
				"execution_count": 60
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"dm_fact_analyze_crypto_vol_binance = sqlContext.table(\"dm_fact_analyze_crypto_vol_binance\")\n",
					"dm_fact_analyze_crypto_vol_gateio = sqlContext.table(\"dm_fact_analyze_crypto_vol_gateio\")\n",
					"\n",
					"#display(dm_fact_analyze_crypto_vol_gateio.where(\"coin='PVU'\"))\n",
					"\n",
					"dm_fact_analyze_crypto_vol_binance.write.parquet(f\"abfss://dp203wipro@dp203wipro.dfs.core.windows.net/vw_5531crypto_binance_{dt_frm}/\")\n",
					"dm_fact_analyze_crypto_vol_gateio.write.parquet(f\"abfss://dp203wipro@dp203wipro.dfs.core.windows.net/vw_5531crypto_gateio_{dt_frm}/\")\n",
					""
				],
				"execution_count": 63
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "scala"
					}
				},
				"source": [
					"%%spark\n",
					"// Make sure the name of the dedcated SQL pool (SQLPool01 below) matches the name of your SQL pool.\n",
					"val df_dm_fact_analyze_crypto_vol_binance = spark.sqlContext.sql(\"select * from dm_fact_analyze_crypto_vol_binance\")\n",
					"df_dm_fact_analyze_crypto_vol_binance.write.synapsesql(\"SQLPool01.wwi.dm_fact_analyze_crypto_vol_binance\", Constants.INTERNAL)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"#master fact tables\n",
					"#dfResult.write.format('parquet').mode('append').save(f'abfss://dp203wipro@dp203wipro.dfs.core.windows.net/fact_{dt_frm}')\n",
					"\n",
					"#ponderation tables\n",
					"#dfResultPond.write.format('parquet').mode('append').save(f'abfss://dp203wipro@dp203wipro.dfs.core.windows.net/factpond_{dt_frm}')\n",
					"\n",
					""
				],
				"execution_count": null
			}
		]
	}
}