{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "dp203wipro"
		},
		"5531Crypto_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of '5531Crypto'"
		},
		"Blob5531Crypto_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Blob5531Crypto'"
		},
		"DedicatedPool01_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'DedicatedPool01'"
		},
		"dp203wipro-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'dp203wipro-WorkspaceDefaultSqlServer'"
		},
		"dp203wipro-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dp203wipro.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline5531Crypto')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy5531CryptoVol",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy5531CryptoFactVol",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MySqlSource"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "5531_crypto_vol",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet5531Crypto",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy 5531CryptoVolBinance",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy 5531CryptoVolPond",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MySqlSource"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "5531_crypto_vol_binance",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "5531CryptoVolBinance",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "FailCryptoVol",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "Copy5531CryptoVol",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Copy5531CryptoFactVol",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Copy 5531CryptoVolPond",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": "Failed to load tickers from Gate.io",
							"errorCode": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "FailCryptoVolBinance",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "Copy 5531CryptoVolBinance",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Copy5531CryptoFactVolBinance",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Copy 5531CryptoVolPondBinance",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": "Error to load tickers from Binance",
							"errorCode": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy5531CryptoFactVol",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "RemoveAllParquetFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MySqlSource"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "5531CryptoFactVol",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet5531CryptoFactVol",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy5531CryptoFactVolBinance",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy5531CryptoVol",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MySqlSource"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "5531FactCryptoVolBinance",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetFacCryptoVolBinance",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Union of Exchanges",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "Copy 5531CryptoVolPondBinance",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Union of Exchanges",
								"type": "NotebookReference"
							},
							"snapshot": true
						}
					},
					{
						"name": "RemoveAllParquetFiles",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "5531CryptoFiles",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"wildcardFileName": {
									"value": "@{concat('*',formatDateTime(utcNow(),'yyyyMMdd'),'*')\n\n}",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "FailToRemoveFiles",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "RemoveAllParquetFiles",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": "Failed to Remove files from Data Lake",
							"errorCode": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy 5531CryptoVolPondBinance",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy 5531CryptoVolBinance",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MySqlSource"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "fact_analyze_crypto_vol_pond_binance",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet5531CryptoVolBinancePond",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy 5531CryptoVolPond",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy5531CryptoFactVolBinance",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MySqlSource"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "fact_analyze_crypto_vol_pond",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet5531CryptoVolPond",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CreateFinalHashTable",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Union of Exchanges",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "DedicatedPool01",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "CREATE TABLE [dbo].[dm_5531crypto]\n    WITH    (   DISTRIBUTION = HASH([id])\n            ,   CLUSTERED COLUMNSTORE INDEX \n            )\nAS\nSELECT  *\nFROM    [dbo].[dm_5531crypto_stage];"
								}
							]
						}
					},
					{
						"name": "FailComputingNotebooks",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "Union of Exchanges",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": "Fail to process transformation in Spark",
							"errorCode": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-07-06T18:55:39Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/5531_crypto_vol')]",
				"[concat(variables('workspaceId'), '/datasets/Parquet5531Crypto')]",
				"[concat(variables('workspaceId'), '/datasets/5531_crypto_vol_binance')]",
				"[concat(variables('workspaceId'), '/datasets/5531CryptoVolBinance')]",
				"[concat(variables('workspaceId'), '/datasets/5531CryptoFactVol')]",
				"[concat(variables('workspaceId'), '/datasets/Parquet5531CryptoFactVol')]",
				"[concat(variables('workspaceId'), '/datasets/5531FactCryptoVolBinance')]",
				"[concat(variables('workspaceId'), '/datasets/ParquetFacCryptoVolBinance')]",
				"[concat(variables('workspaceId'), '/notebooks/Union of Exchanges')]",
				"[concat(variables('workspaceId'), '/datasets/5531CryptoFiles')]",
				"[concat(variables('workspaceId'), '/datasets/fact_analyze_crypto_vol_pond_binance')]",
				"[concat(variables('workspaceId'), '/datasets/Parquet5531CryptoVolBinancePond')]",
				"[concat(variables('workspaceId'), '/datasets/fact_analyze_crypto_vol_pond')]",
				"[concat(variables('workspaceId'), '/datasets/Parquet5531CryptoVolPond')]",
				"[concat(variables('workspaceId'), '/linkedServices/DedicatedPool01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5531CryptoFactVol')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "5531Crypto",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "MySqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": "`fact_analyze_crypto_vol`"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/5531Crypto')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5531CryptoFiles')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Blob5531Crypto",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "dp203wipro"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Blob5531Crypto')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5531CryptoVolBinance')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dp203wipro-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat('binance_',formatDateTime(utcNow(),'yyyyMMdd'),'.parquet')",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('5531Crypto_',formatDateTime(utcNow(),'yyyyMMdd'))",
							"type": "Expression"
						},
						"fileSystem": "dp203wipro"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "id",
						"type": "INT32"
					},
					{
						"name": "fact_calc",
						"type": "FLOAT"
					},
					{
						"name": "ticker",
						"type": "UTF8"
					},
					{
						"name": "coin",
						"type": "UTF8"
					},
					{
						"name": "pair",
						"type": "UTF8"
					},
					{
						"name": "vol_time",
						"type": "INT32"
					},
					{
						"name": "volume",
						"type": "FLOAT"
					},
					{
						"name": "processed_date",
						"type": "INT96"
					},
					{
						"name": "pond_value",
						"type": "FLOAT"
					},
					{
						"name": "last_processed_date",
						"type": "INT96"
					},
					{
						"name": "sign_vol",
						"type": "FLOAT"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dp203wipro-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5531FactCryptoVolBinance')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "5531Crypto",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "MySqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": "`fact_analyze_crypto_vol_binance`"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/5531Crypto')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5531_crypto_vol')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "5531Crypto",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "MySqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": "`dm_fact_analyze_crypto_vol`"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/5531Crypto')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5531_crypto_vol_binance')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "5531Crypto",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "MySqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": "`dm_fact_analyze_crypto_vol_binance`"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/5531Crypto')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Parquet5531Crypto')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Blob5531Crypto",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat('gateio_',formatDateTime(utcNow(),'yyyyMMdd'),'.parquet')",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('5531Crypto_',formatDateTime(utcNow(),'yyyyMMdd'))",
							"type": "Expression"
						},
						"container": "dp203wipro"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Blob5531Crypto')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Parquet5531CryptoFactVol')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dp203wipro-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat('gateio_',formatDateTime(utcNow(),'yyyyMMdd'),'.parquet')",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('5531CryptoFact_',formatDateTime(utcNow(),'yyyyMMdd'))",
							"type": "Expression"
						},
						"fileSystem": "dp203wipro"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "id",
						"type": "INT32"
					},
					{
						"name": "fact_calc",
						"type": "FLOAT"
					},
					{
						"name": "ticker",
						"type": "UTF8"
					},
					{
						"name": "coin",
						"type": "UTF8"
					},
					{
						"name": "pair",
						"type": "UTF8"
					},
					{
						"name": "vol_time",
						"type": "INT32"
					},
					{
						"name": "volume",
						"type": "FLOAT"
					},
					{
						"name": "processed_date",
						"type": "INT96"
					},
					{
						"name": "pond_value",
						"type": "FLOAT"
					},
					{
						"name": "last_processed_date",
						"type": "INT96"
					},
					{
						"name": "sign_vol",
						"type": "FLOAT"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dp203wipro-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Parquet5531CryptoVolBinancePond')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dp203wipro-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat('binancepond_',formatDateTime(utcNow(),'yyyyMMdd'),'.parquet')",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('5531CryptoPond_',formatDateTime(utcNow(),'yyyyMMdd'))",
							"type": "Expression"
						},
						"fileSystem": "dp203wipro"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "id",
						"type": "INT32"
					},
					{
						"name": "ticker",
						"type": "UTF8"
					},
					{
						"name": "coin",
						"type": "UTF8"
					},
					{
						"name": "pair",
						"type": "UTF8"
					},
					{
						"name": "vol_time",
						"type": "INT32"
					},
					{
						"name": "volume",
						"type": "FLOAT"
					},
					{
						"name": "processed_date",
						"type": "INT96"
					},
					{
						"name": "pond_value",
						"type": "FLOAT"
					},
					{
						"name": "dm_inserted",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dp203wipro-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Parquet5531CryptoVolPond')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dp203wipro-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat('gateiopond_',formatDateTime(utcNow(),'yyyyMMdd'),'.parquet')",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('5531CryptoPond_',formatDateTime(utcNow(),'yyyyMMdd'))",
							"type": "Expression"
						},
						"fileSystem": "dp203wipro"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "id",
						"type": "INT32"
					},
					{
						"name": "ticker",
						"type": "UTF8"
					},
					{
						"name": "coin",
						"type": "UTF8"
					},
					{
						"name": "pair",
						"type": "UTF8"
					},
					{
						"name": "vol_time",
						"type": "INT32"
					},
					{
						"name": "volume",
						"type": "FLOAT"
					},
					{
						"name": "processed_date",
						"type": "INT96"
					},
					{
						"name": "pond_value",
						"type": "FLOAT"
					},
					{
						"name": "dm_inserted",
						"type": "INT32"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dp203wipro-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ParquetFacCryptoVolBinance')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "dp203wipro-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat('binance_',formatDateTime(utcNow(),'yyyyMMdd'),'.parquet')",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('5531CryptoFact_',formatDateTime(utcNow(),'yyyyMMdd'))",
							"type": "Expression"
						},
						"fileSystem": "dp203wipro"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "id",
						"type": "INT32"
					},
					{
						"name": "fact_calc",
						"type": "FLOAT"
					},
					{
						"name": "ticker",
						"type": "UTF8"
					},
					{
						"name": "coin",
						"type": "UTF8"
					},
					{
						"name": "pair",
						"type": "UTF8"
					},
					{
						"name": "vol_time",
						"type": "INT32"
					},
					{
						"name": "volume",
						"type": "FLOAT"
					},
					{
						"name": "processed_date",
						"type": "INT96"
					},
					{
						"name": "pond_value",
						"type": "FLOAT"
					},
					{
						"name": "last_processed_date",
						"type": "INT96"
					},
					{
						"name": "sign_vol",
						"type": "FLOAT"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dp203wipro-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/fact_analyze_crypto_vol_pond')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "5531Crypto",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "MySqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": "`fact_analyze_crypto_vol_pond`"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/5531Crypto')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/fact_analyze_crypto_vol_pond_binance')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "5531Crypto",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "MySqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": "`fact_analyze_crypto_vol_pond_binance_bkp`"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/5531Crypto')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5531Crypto')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "MySql",
				"typeProperties": {
					"connectionString": "[parameters('5531Crypto_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Blob5531Crypto')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('Blob5531Crypto_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DedicatedPool01')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('DedicatedPool01_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dp203wipro-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('dp203wipro-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dp203wipro-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('dp203wipro-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL Dedicated Pool DM Binance')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nCREATE TABLE dm_5531crypto_stage  \n(\nfact_calc float NULL,\nid integer NOT NULL,\nticker varchar(50) NOT NULL,\ncoin varchar(50) NULL,\npair varchar(50) NULL,\nvol_time integer NULL,\nvolume float NULL,\nprocessed_date DATETIME NULL,\nlast_processed_date DATETIME NULL,\npond_value float NULL,\ndm_inserted integer NULL,\nexchange varchar(20) NULL\n)\nWITH (DISTRIBUTION = ROUND_ROBIN, CLUSTERED COLUMNSTORE INDEX ORDER(id)) ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SQLPool01",
						"poolName": "SQLPool01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Union of Exchanges')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "spark01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "1",
						"spark.autotune.trackingId": "9d643c62-fae7-465b-a98e-161196c83679"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/735d0ce7-dfad-483d-94ed-3fa2bd57b61c/resourceGroups/dp203wipro/providers/Microsoft.Synapse/workspaces/dp203wipro/bigDataPools/spark01",
						"name": "spark01",
						"type": "Spark",
						"endpoint": "https://dp203wipro.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"from pyspark.sql.functions import *\r\n",
							"import datetime\r\n",
							"\r\n",
							"dt = datetime.datetime.now()\r\n",
							"dt_frm = dt.strftime('%Y%m%d')\r\n",
							"\r\n",
							"\r\n",
							"dfBinance = spark \\\r\n",
							"          .read \\\r\n",
							"          .load(f'abfss://dp203wipro@dp203wipro.dfs.core.windows.net/5531CryptoFact_{dt_frm}/binance_*', format='parquet')\r\n",
							"\r\n",
							"dfGateio = spark \\\r\n",
							"     .read \\\r\n",
							"     .load(f'abfss://dp203wipro@dp203wipro.dfs.core.windows.net/5531CryptoFact_{dt_frm}/gateio_*', format='parquet')\r\n",
							"\r\n",
							"dfGateio  = dfGateio.withColumn('Exchange',lit('GATEIO'))\r\n",
							"dfBinance  = dfBinance.withColumn('Exchange',lit('BINANCE'))\r\n",
							"\r\n",
							"dfResult = dfBinance.unionAll(dfGateio)\r\n",
							"\r\n",
							"\"\"\"\r\n",
							"\t`tb1`.`id` AS `id`,\r\n",
							"\t\t`tb1`.`ticker` AS `ticker`,\r\n",
							"\t\t`tb1`.`coin` AS `coin`,\r\n",
							"\t\t`tb1`.`pair` AS `pair`,\r\n",
							"\t\t`tb1`.`vol_time` AS `vol_time`,\r\n",
							"\t\t`tb1`.`volume` AS `volume`,\r\n",
							"\t\t`tb1`.`processed_date` AS `processed_date`,\r\n",
							"\t\tmax(`tb1`.`processed_date`) OVER (PARTITION BY `tb1`.`coin` ORDER BY `tb1`.`processed_date` DESC) AS `last_processed_date`,\r\n",
							"\t\t`tb1`.`dm_inserted` AS `dm_inserted`\r\n",
							"\"\"\"\r\n",
							"dfResult = dfResult.select(\"id\",\"ticker\",\"coin\",\"pair\",\"vol_time\",\"volume\",\"processed_date\",\"dm_inserted\",\"Exchange\")\r\n",
							"\r\n",
							"dfResult.createOrReplaceTempView(\"fact_analyze_crypto_vol\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dfBinancePond = spark \\\n",
							"          .read \\\n",
							"          .load(f'abfss://dp203wipro@dp203wipro.dfs.core.windows.net/5531CryptoPond_{dt_frm}/binancepond_*', format='parquet')\n",
							"\n",
							"dfGateioPond = spark \\\n",
							"     .read \\\n",
							"     .load(f'abfss://dp203wipro@dp203wipro.dfs.core.windows.net/5531CryptoPond_{dt_frm}/gateiopond_*', format='parquet')\n",
							"\n",
							"\n",
							"dfBinancePond.createOrReplaceTempView(\"fact_analyze_crypto_vol_pond_binance\")\n",
							"dfGateioPond.createOrReplaceTempView(\"fact_analyze_crypto_vol_pond_gateio\")\n",
							"\n",
							"#deprecated\n",
							"#dfGateioPond  = dfGateio.withColumn('Exchange',lit('GATEIO'))\n",
							"#dfBinancePond  = dfBinancePond.withColumn('Exchange',lit('BINANCE'))\n",
							"#dfResultPond = dfBinancePond.unionAll(dfGateioPond)"
						],
						"outputs": [],
						"execution_count": 27
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\n",
							"\n",
							"CREATE OR REPLACE TEMPORARY VIEW dm_fact_analyze_crypto_vol_binance\n",
							"AS\n",
							"WITH cte AS (\n",
							"\tSELECT\n",
							"\t\ttb1.id AS id,\n",
							"\t\ttb1.ticker AS ticker,\n",
							"\t\ttb1.coin AS coin,\n",
							"\t\ttb1.pair AS pair,\n",
							"\t\ttb1.vol_time AS vol_time,\n",
							"\t\ttb1.volume AS volume,\n",
							"\t\ttb1.processed_date AS processed_date,\n",
							"\t\tmax(tb1.processed_date) OVER (PARTITION BY tb1.coin ORDER BY tb1.processed_date DESC) AS last_processed_date,\n",
							"\t\ttb1.dm_inserted AS dm_inserted\n",
							"\tFROM\n",
							"\t\tfact_analyze_crypto_vol tb1\n",
							"),\n",
							"cte2 AS (\n",
							"SELECT\n",
							"\tcte.id AS id,\n",
							"\tcte.ticker AS ticker,\n",
							"\tcte.coin AS coin,\n",
							"\tcte.pair AS pair,\n",
							"\tcte.vol_time AS vol_time,\n",
							"\tcte.volume AS volume,\n",
							"\tcte.processed_date AS processed_date,\n",
							"\tcte.last_processed_date AS last_processed_date,\n",
							"\t(\n",
							"\tSELECT\n",
							"\t\tfirst(fact_analyze_crypto_vol.volume)\n",
							"\tFROM\n",
							"\t\tfact_analyze_crypto_vol\n",
							"\tWHERE\n",
							"\t\tfact_analyze_crypto_vol.coin = cte.coin\n",
							"\t\tAND fact_analyze_crypto_vol.processed_date = cte.last_processed_date) AS last_volume,\n",
							"\tcte.dm_inserted AS dm_inserted\n",
							"FROM\n",
							"\tcte\n",
							"),\n",
							"cte3 AS (\n",
							"SELECT\n",
							"\tcte2.last_volume / cte2.volume AS fact_calc,\n",
							"\tcte2.id AS id,\n",
							"\tcte2.ticker AS ticker,\n",
							"\tcte2.coin AS coin,\n",
							"\tcte2.pair AS pair,\n",
							"\tcte2.vol_time AS vol_time,\n",
							"\tcte2.volume AS volume,\n",
							"\tcte2.processed_date AS processed_date,\n",
							"\tcte2.last_processed_date AS last_processed_date,\n",
							"\tcte2.dm_inserted AS dm_inserted\n",
							"FROM\n",
							"\tcte2\n",
							")\n",
							"SELECT\n",
							"\tcte3.fact_calc AS fact_calc,\n",
							"\tcte3.id AS id,\n",
							"\tcte3.ticker AS ticker,\n",
							"\tcte3.coin AS coin,\n",
							"\tcte3.pair AS pair,\n",
							"\tifnull(pnd.vol_time, cte3.vol_time) AS vol_time,\n",
							"\tcte3.volume AS volume,\n",
							"\tcte3.processed_date AS processed_date,\n",
							"\tcte3.last_processed_date AS last_processed_date,\n",
							"\tcte3.fact_calc * cte3.vol_time AS pond_value,\n",
							"\tcte3.dm_inserted AS dm_inserted,\n",
							"    'BINANCE' as exchange\n",
							"FROM (cte3\n",
							"\tLEFT JOIN fact_analyze_crypto_vol_pond_binance pnd ON (cte3.ticker = pnd.ticker\n",
							"\t\t\tAND cte3.vol_time = pnd.previous_vol_time))"
						],
						"outputs": [],
						"execution_count": 28
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\n",
							"\n",
							"CREATE OR REPLACE TEMPORARY VIEW dm_fact_analyze_crypto_vol_gateio\n",
							"AS\n",
							"WITH cte AS (\n",
							"\tSELECT\n",
							"\t\ttb1.id AS id,\n",
							"\t\ttb1.ticker AS ticker,\n",
							"\t\ttb1.coin AS coin,\n",
							"\t\ttb1.pair AS pair,\n",
							"\t\ttb1.vol_time AS vol_time,\n",
							"\t\ttb1.volume AS volume,\n",
							"\t\ttb1.processed_date AS processed_date,\n",
							"\t\tmax(tb1.processed_date) OVER (PARTITION BY tb1.coin ORDER BY tb1.processed_date DESC) AS last_processed_date,\n",
							"\t\ttb1.dm_inserted AS dm_inserted\n",
							"\tFROM\n",
							"\t\tfact_analyze_crypto_vol tb1\n",
							"),\n",
							"cte2 AS (\n",
							"SELECT\n",
							"\tcte.id AS id,\n",
							"\tcte.ticker AS ticker,\n",
							"\tcte.coin AS coin,\n",
							"\tcte.pair AS pair,\n",
							"\tcte.vol_time AS vol_time,\n",
							"\tcte.volume AS volume,\n",
							"\tcte.processed_date AS processed_date,\n",
							"\tcte.last_processed_date AS last_processed_date,\n",
							"\t(\n",
							"\tSELECT\n",
							"\t\tfirst(fact_analyze_crypto_vol.volume)\n",
							"\tFROM\n",
							"\t\tfact_analyze_crypto_vol\n",
							"\tWHERE\n",
							"\t\tfact_analyze_crypto_vol.coin = cte.coin\n",
							"\t\tAND fact_analyze_crypto_vol.processed_date = cte.last_processed_date) AS last_volume,\n",
							"\tcte.dm_inserted AS dm_inserted\n",
							"FROM\n",
							"\tcte\n",
							"),\n",
							"cte3 AS (\n",
							"SELECT\n",
							"\tcte2.last_volume / cte2.volume AS fact_calc,\n",
							"\tcte2.id AS id,\n",
							"\tcte2.ticker AS ticker,\n",
							"\tcte2.coin AS coin,\n",
							"\tcte2.pair AS pair,\n",
							"\tcte2.vol_time AS vol_time,\n",
							"\tcte2.volume AS volume,\n",
							"\tcte2.processed_date AS processed_date,\n",
							"\tcte2.last_processed_date AS last_processed_date,\n",
							"\tcte2.dm_inserted AS dm_inserted\n",
							"FROM\n",
							"\tcte2\n",
							")\n",
							"SELECT\n",
							"\tcte3.fact_calc AS fact_calc,\n",
							"\tcte3.id AS id,\n",
							"\tcte3.ticker AS ticker,\n",
							"\tcte3.coin AS coin,\n",
							"\tcte3.pair AS pair,\n",
							"\tifnull(pnd.vol_time, cte3.vol_time) AS vol_time,\n",
							"\tcte3.volume AS volume,\n",
							"\tcte3.processed_date AS processed_date,\n",
							"\tcte3.last_processed_date AS last_processed_date,\n",
							"\tcte3.fact_calc * cte3.vol_time AS pond_value,\n",
							"\tcte3.dm_inserted AS dm_inserted,\n",
							"\t'GATEIO' as exchange\n",
							"FROM (cte3\n",
							"\tLEFT JOIN fact_analyze_crypto_vol_pond_gateio pnd ON (cte3.ticker = pnd.ticker\n",
							"\t\t\tAND cte3.vol_time = pnd.previous_vol_time))"
						],
						"outputs": [],
						"execution_count": 29
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"dm_fact_analyze_crypto_vol_binance = sqlContext.table(\"dm_fact_analyze_crypto_vol_binance\")\n",
							"dm_fact_analyze_crypto_vol_gateio = sqlContext.table(\"dm_fact_analyze_crypto_vol_gateio\")\n",
							"\n",
							"dm_5531crypto = dm_fact_analyze_crypto_vol_binance.unionAll(dm_fact_analyze_crypto_vol_gateio)\n",
							"\n",
							"\n",
							"dm_5531crypto.createOrReplaceTempView(\"vw_dm_5531crypto\")\n",
							"\n",
							"#dm_fact_analyze_crypto_vol_binance.write.parquet(f\"abfss://dp203wipro@dp203wipro.dfs.core.windows.net/vw_5531crypto_binance_{dt_frm}/\")\n",
							"#dm_fact_analyze_crypto_vol_gateio.write.parquet(f\"abfss://dp203wipro@dp203wipro.dfs.core.windows.net/vw_5531crypto_gateio_{dt_frm}/\")\n",
							""
						],
						"outputs": [],
						"execution_count": 30
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "scala"
							}
						},
						"source": [
							"%%spark\n",
							"// Make sure the name of the dedcated SQL pool (SQLPool01 below) matches the name of your SQL pool.\n",
							"val df_dm_fact_analyze_crypto_vol_binance = spark.sqlContext.sql(\"select fact_calc, id, ticker, coin, pair, vol_time, volume, processed_date, last_processed_date , pond_value, dm_inserted, exchange from vw_dm_5531crypto\")\n",
							"df_dm_fact_analyze_crypto_vol_binance.write.mode(\"overwrite\").synapsesql(\"SQLPool01.dbo.dm_5531crypto_stage\", Constants.INTERNAL)"
						],
						"outputs": [],
						"execution_count": 34
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"\n",
							"#master fact tables\n",
							"#dfResult.write.format('parquet').mode('append').save(f'abfss://dp203wipro@dp203wipro.dfs.core.windows.net/fact_{dt_frm}')\n",
							"\n",
							"#ponderation tables\n",
							"#dfResultPond.write.format('parquet').mode('append').save(f'abfss://dp203wipro@dp203wipro.dfs.core.windows.net/factpond_{dt_frm}')\n",
							"\n",
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/spark01')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 3,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.1",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus2"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQLPool01')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus2"
		}
	]
}